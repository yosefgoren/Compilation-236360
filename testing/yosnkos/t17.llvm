declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
define void@foo(i32){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
%truncated_byte1 = trunc i32 %0 to i8
%reg2 = add i8 0, %truncated_byte1
%b2int_conv_reg3 = zext i8 %reg2 to i32
%reg4 = add i32 %b2int_conv_reg3,  33
call void(i32) @printi(i32 %reg4)
br label %func_end_11
br label %func_end_11
func_end_11:
ret void
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_17
statement_17:
%reg5 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32  99, i32* %reg5
br label %statement_21
statement_21:
%param_ptr6 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw7 = load i32, i32* %param_ptr6
%truncated_byte8 = trunc i32 %param_raw7 to i8
%reg9 = add i8 0, %truncated_byte8
%b2int_conv_reg10 = zext i8 %reg9 to i32
%reg11 = add i32 %b2int_conv_reg10,  1
%reg12 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
store i32 %reg11, i32* %reg12
br label %statement_31
statement_31:
%param_ptr13 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw14 = load i32, i32* %param_ptr13
%reg15 = add i32 0, %param_raw14
%int2byte_conv_reg16 = trunc i32 %reg15 to i8
%raw_reg17 = zext i8 %int2byte_conv_reg16 to i32
call void(i32) @foo(i32 %raw_reg17)
br label %func_end_40
br label %func_end_40
func_end_40:
ret void
}
