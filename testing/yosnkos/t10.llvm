declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
define i1@trutru(){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
%reg1 = add i32 0, 9001
call void(i32) @printi(i32 %reg1)
br label %statement_7
statement_7:
br label %true_case_9
true_case_9:
br label %set_bool_reg_13
false_case_11:
br label %set_bool_reg_13
set_bool_reg_13:
%reg2 = phi i1 [1, %true_case_9], [0, %false_case_11]
ret i1 %reg2
br label %func_end_17
func_end_17:
ret i1 0
}
define void@main(){
%sp = alloca [50 x i32]
br label %parse_label_23
parse_label_23:
br label %statement_32
parse_label_25:
%reg3 = call i1() @trutru()
br i1 %reg3, label %true_case_28, label %false_case_30
true_case_28:
br label %statement_32
false_case_30:
br label %func_end_37
statement_32:
%reg4 = add i32 0, 9002
call void(i32) @printi(i32 %reg4)
br label %func_end_37
br label %func_end_37
func_end_37:
ret void
}
