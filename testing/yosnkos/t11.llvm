declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
define void@hello(i32, i32){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
ret void
br label %func_end_6
func_end_6:
ret void
}
define i1@OR(i32, i32){
%sp = alloca [50 x i32]
br label %parse_label_12
parse_label_12:
%reg1 = trunc i32 %0 to i1
br i1 %reg1, label %true_case_15, label %false_case_17
true_case_15:
br label %statement_19
false_case_17:
br label %statement_28
statement_19:
br label %true_case_21
true_case_21:
br label %set_bool_reg_25
false_case_23:
br label %set_bool_reg_25
set_bool_reg_25:
%reg2 = phi i1 [1, %true_case_21], [0, %false_case_23]
ret i1 %reg2
statement_28:
%reg3 = trunc i32 %1 to i1
br i1 %reg3, label %true_case_31, label %false_case_33
true_case_31:
br label %true_case_35
false_case_33:
br label %false_case_37
true_case_35:
br label %set_bool_reg_39
false_case_37:
br label %set_bool_reg_39
set_bool_reg_39:
%reg4 = phi i1 [1, %true_case_35], [0, %false_case_37]
ret i1 %reg4
br label %func_end_43
func_end_43:
ret i1 0
}
define i1@NOT(i32){
%sp = alloca [50 x i32]
br label %parse_label_49
parse_label_49:
%reg5 = trunc i32 %0 to i1
br i1 %reg5, label %true_case_52, label %false_case_54
true_case_52:
br label %statement_56
false_case_54:
br label %statement_65
statement_56:
br label %false_case_60
true_case_58:
br label %set_bool_reg_62
false_case_60:
br label %set_bool_reg_62
set_bool_reg_62:
%reg6 = phi i1 [1, %true_case_58], [0, %false_case_60]
ret i1 %reg6
statement_65:
br label %true_case_67
true_case_67:
br label %set_bool_reg_71
false_case_69:
br label %set_bool_reg_71
set_bool_reg_71:
%reg7 = phi i1 [1, %true_case_67], [0, %false_case_69]
ret i1 %reg7
br label %func_end_75
func_end_75:
ret i1 0
}
define i1@FALSE(){
%sp = alloca [50 x i32]
br label %statement_81
statement_81:
%reg8 = add i8 0, 1
%raw_reg9 = zext i8 %reg8 to i32
%reg10 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %raw_reg9, i32* %reg10
br label %func_end_88
br label %func_end_88
func_end_88:
ret i1 0
}
define i1@TRUE(){
%sp = alloca [50 x i32]
br label %statement_94
statement_94:
%reg11 = call i1() @FALSE()
br i1 %reg11, label %true_case_97, label %false_case_99
true_case_97:
br label %true_case_101
false_case_99:
br label %false_case_103
true_case_101:
br label %set_bool_reg_105
false_case_103:
br label %set_bool_reg_105
set_bool_reg_105:
%reg12 = phi i32 [1, %true_case_101], [0, %false_case_103]
%reg13 = call i1(i32) @NOT(i32%reg12)
br i1 %reg13, label %true_case_109, label %false_case_111
true_case_109:
br label %true_case_113
false_case_111:
br label %false_case_115
true_case_113:
br label %set_bool_reg_117
false_case_115:
br label %set_bool_reg_117
set_bool_reg_117:
%reg14 = phi i1 [1, %true_case_113], [0, %false_case_115]
ret i1 %reg14
br label %func_end_121
func_end_121:
ret i1 0
}
define i32@foo(){
%sp = alloca [50 x i32]
br label %parse_label_127
parse_label_127:
%reg15 = call i1() @TRUE()
br i1 %reg15, label %true_case_130, label %false_case_132
true_case_130:
br label %true_case_146
false_case_132:
br label %false_case_148
%reg16 = call i1() @FALSE()
br i1 %reg16, label %true_case_136, label %false_case_138
true_case_136:
br label %true_case_140
false_case_138:
br label %false_case_142
true_case_140:
br label %set_bool_reg_144
false_case_142:
br label %set_bool_reg_144
set_bool_reg_144:
%reg17 = phi i32 [1, %true_case_140], [0, %false_case_142]
true_case_146:
br label %set_bool_reg_150
false_case_148:
br label %set_bool_reg_150
set_bool_reg_150:
%reg18 = phi i32 [1, %true_case_146], [0, %false_case_148]
%reg19 = call i1(i32 i32) @OR(i32%reg17, i32%reg18)
br i1 %reg19, label %true_case_154, label %false_case_156
true_case_154:
br label %parse_label_158
false_case_156:
br label %statement_167
parse_label_158:
br label %statement_160
statement_160:
%reg20 = add i32 0, 800
call void(i32) @printi(i32%reg20)
br label %statement_164
statement_164:
%reg21 = add i32 0, 800
ret i32%reg21
statement_167:
%reg22 = add i32 0, 900
ret i32%reg22
br label %func_end_171
func_end_171:
ret i32 0
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_177
statement_177:
%reg23 = add i32 0, 878
%reg24 = add i32 0, 10
%reg25 = mul i32 %reg23, %reg24
%reg26 = add i32 0, 7
%reg27 = add i32 %reg25, %reg26
call void(i32) @printi(i32%reg27)
br label %statement_185
statement_185:
%reg28 = call i32() @foo()
%reg29 = add i32 0, %reg28
call void(i32) @printi(i32%reg29)
br label %parse_label_190
parse_label_190:
br label %parse_label_204
parse_label_192:
%reg30 = call i1() @TRUE()
br i1 %reg30, label %true_case_195, label %false_case_197
true_case_195:
br label %statement_199
false_case_197:
br label %parse_label_204
statement_199:
%reg31 = add i32 0, 1
%reg32 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg31, i32* %reg32
br label %parse_label_204
parse_label_204:
br label %statement_213
parse_label_206:
%reg33 = call i1() @TRUE()
br i1 %reg33, label %true_case_209, label %false_case_211
true_case_209:
br label %statement_213
false_case_211:
br label %func_end_219
statement_213:
%reg34 = add i32 0, 1
%reg35 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg34, i32* %reg35
br label %func_end_219
br label %func_end_219
func_end_219:
ret void
}
