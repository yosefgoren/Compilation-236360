declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
define void@hello(i32, i32){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
ret void
br label %func_end_6
func_end_6:
ret void
}
define i1@OR(i32, i32){
%sp = alloca [50 x i32]
br label %parse_label_12
parse_label_12:
%reg1 = trunc i32 %0 to i1
br i1 %reg1, label %true_case_15, label %false_case_17
true_case_15:
br label %statement_19
false_case_17:
br label %statement_28
statement_19:
br label %true_case_21
true_case_21:
br label %set_bool_reg_25
false_case_23:
br label %set_bool_reg_25
set_bool_reg_25:
%reg2 = phi i1 [1, %true_case_21], [0, %false_case_23]
ret i1 %reg2
statement_28:
%reg3 = trunc i32 %1 to i1
br i1 %reg3, label %true_case_31, label %false_case_33
true_case_31:
br label %true_case_35
false_case_33:
br label %false_case_37
true_case_35:
br label %set_bool_reg_39
false_case_37:
br label %set_bool_reg_39
set_bool_reg_39:
%reg4 = phi i1 [1, %true_case_35], [0, %false_case_37]
ret i1 %reg4
br label %func_end_43
func_end_43:
ret i1 0
}
define i1@NOT(i32){
%sp = alloca [50 x i32]
br label %parse_label_49
parse_label_49:
%reg5 = trunc i32 %0 to i1
br i1 %reg5, label %true_case_52, label %false_case_54
true_case_52:
br label %statement_56
false_case_54:
br label %statement_65
statement_56:
br label %false_case_60
true_case_58:
br label %set_bool_reg_62
false_case_60:
br label %set_bool_reg_62
set_bool_reg_62:
%reg6 = phi i1 [1, %true_case_58], [0, %false_case_60]
ret i1 %reg6
statement_65:
br label %true_case_67
true_case_67:
br label %set_bool_reg_71
false_case_69:
br label %set_bool_reg_71
set_bool_reg_71:
%reg7 = phi i1 [1, %true_case_67], [0, %false_case_69]
ret i1 %reg7
br label %func_end_75
func_end_75:
ret i1 0
}
define i1@FALSE(){
%sp = alloca [50 x i32]
br label %statement_81
statement_81:
%reg8 = add i8 0, 1
%raw_reg9 = zext i8 %reg8 to i32
%reg10 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %raw_reg9, i32* %reg10
br label %func_end_88
br label %func_end_88
func_end_88:
ret i1 0
}
define i1@TRUE(){
%sp = alloca [50 x i32]
br label %statement_94
statement_94:
%reg11 = call i1() @FALSE()
br i1 %reg11, label %true_case_97, label %false_case_99
true_case_97:
br label %true_case_101
false_case_99:
br label %false_case_103
true_case_101:
br label %set_bool_reg_105
false_case_103:
br label %set_bool_reg_105
set_bool_reg_105:
%reg12 = phi i32 [1, %true_case_101], [0, %false_case_103]
%reg13 = add i32 0, %reg12
%reg14 = call i1(i32) @NOT(i32 %reg13)
br i1 %reg14, label %true_case_110, label %false_case_112
true_case_110:
br label %true_case_114
false_case_112:
br label %false_case_116
true_case_114:
br label %set_bool_reg_118
false_case_116:
br label %set_bool_reg_118
set_bool_reg_118:
%reg15 = phi i1 [1, %true_case_114], [0, %false_case_116]
ret i1 %reg15
br label %func_end_122
func_end_122:
ret i1 0
}
define i32@foo(){
%sp = alloca [50 x i32]
br label %parse_label_128
parse_label_128:
%reg16 = call i1() @TRUE()
br i1 %reg16, label %true_case_131, label %false_case_133
true_case_131:
br label %true_case_135
false_case_133:
br label %false_case_137
true_case_135:
br label %set_bool_reg_139
false_case_137:
br label %set_bool_reg_139
set_bool_reg_139:
%reg17 = phi i32 [1, %true_case_135], [0, %false_case_137]
%reg18 = add i32 0, %reg17
%reg19 = call i1() @FALSE()
br i1 %reg19, label %true_case_144, label %false_case_146
true_case_144:
br label %true_case_148
false_case_146:
br label %false_case_150
true_case_148:
br label %set_bool_reg_152
false_case_150:
br label %set_bool_reg_152
set_bool_reg_152:
%reg20 = phi i32 [1, %true_case_148], [0, %false_case_150]
%reg21 = add i32 0, %reg20
%reg22 = call i1(i32, i32) @OR(i32 %reg21, i32 %reg18)
br i1 %reg22, label %true_case_157, label %false_case_159
true_case_157:
br label %parse_label_161
false_case_159:
br label %statement_170
parse_label_161:
br label %statement_163
statement_163:
%reg23 = add i32 0, 800
call void(i32) @printi(i32 %reg23)
br label %statement_167
statement_167:
%reg24 = add i32 0, 800
ret i32%reg24
statement_170:
%reg25 = add i32 0, 900
ret i32%reg25
br label %func_end_174
func_end_174:
ret i32 0
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_180
statement_180:
%reg26 = add i32 0, 878
%reg27 = add i32 0, 10
%reg28 = mul i32 %reg26, %reg27
%reg29 = add i32 0, 7
%reg30 = add i32 %reg28, %reg29
call void(i32) @printi(i32 %reg30)
br label %statement_188
statement_188:
%reg31 = call i32() @foo()
%reg32 = add i32 0, %reg31
call void(i32) @printi(i32 %reg32)
br label %parse_label_193
parse_label_193:
br label %parse_label_207
parse_label_195:
%reg33 = call i1() @TRUE()
br i1 %reg33, label %true_case_198, label %false_case_200
true_case_198:
br label %statement_202
false_case_200:
br label %parse_label_207
statement_202:
%reg34 = add i32 0, 1
%reg35 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg34, i32* %reg35
br label %parse_label_207
parse_label_207:
br label %statement_216
parse_label_209:
%reg36 = call i1() @TRUE()
br i1 %reg36, label %true_case_212, label %false_case_214
true_case_212:
br label %statement_216
false_case_214:
br label %func_end_222
statement_216:
%reg37 = add i32 0, 1
%reg38 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg37, i32* %reg38
br label %func_end_222
br label %func_end_222
func_end_222:
ret void
}
