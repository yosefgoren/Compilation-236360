declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
%reg1 = add i32 0, 1
%reg2 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg1, i32* %reg2
br label %statement_8
statement_8:
%reg3 = add i32 0, 900
%reg4 = add i32 0, 100
%reg5 = sdiv i32 %reg3, %reg4
%reg6 = add i32 0, 990
%reg7 = add i32 %reg5, %reg6
%param_ptr8 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw9 = load i32, i32* %param_ptr8
%reg10 = add i32 0, %param_raw9
%reg11 = add i32 %reg7, %reg10
%reg12 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
store i32 %reg11, i32* %reg12
br label %parse_label_21
parse_label_21:
br label %parse_label_33
parse_label_23:
br label %parse_label_25
parse_label_25:
br label %parse_label_33
parse_label_27:
br label %parse_label_33
parse_label_29:
br label %statement_51
parse_label_31:
br label %parse_label_33
parse_label_33:
br label %parse_label_35
parse_label_35:
br label %parse_label_37
parse_label_37:
br label %parse_label_39
parse_label_39:
br label %statement_41
statement_41:
%param_ptr13 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw14 = load i32, i32* %param_ptr13
%reg15 = add i32 0, %param_raw14
call void(i32) @printi(i32 %reg15)
br label %statement_51
statement_47:
%reg16 = add i32 0, 8888
call void(i32) @printi(i32 %reg16)
br label %statement_51
statement_51:
ret void
br label %func_end_54
func_end_54:
ret void
}
